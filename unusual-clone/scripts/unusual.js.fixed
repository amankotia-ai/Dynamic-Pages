/**
 * Unusual Clone - Client-side personalization script
 * This script fetches personalized content based on referrer and URL parameters
 * and applies it to the target website.
 */
(function() {
  // Function to extract user_id from script tag or URL params
  const getUserId = function() {
    // First try to get from URL query parameter
    const urlParams = new URLSearchParams(window.location.search);
    const userIdFromUrl = urlParams.get('user_id');
    
    if (userIdFromUrl) return userIdFromUrl;
    
    // If not in URL, try to extract from script tag
    const scripts = document.getElementsByTagName('script');
    for (let i = scripts.length - 1; i >= 0; i--) {
      if (scripts[i].src.includes('unusual.js')) {
        const scriptUrl = new URL(scripts[i].src);
        return scriptUrl.searchParams.get('user_id');
      }
    }
    
    return null;
  };

  // Function to apply replacements to the DOM
  const applyReplacements = function(replacements) {
    if (!replacements || !Array.isArray(replacements)) return;
    
    replacements.forEach(function(replacement) {
      try {
        const elements = document.querySelectorAll(replacement.selector);
        
        if (elements && elements.length > 0) {
          elements.forEach(function(element) {
            element.innerHTML = replacement.content;
          });
        } else {
          console.log('Unusual: No elements found for selector', replacement.selector);
        }
      } catch (error) {
        console.error('Unusual: Error applying replacement', error);
      }
    });
  };

  // Main function to fetch and apply content
  const fetchAndApplyContent = function(apiUrl, userId, referrer, url) {
    // Validate userId to prevent 400 errors
    if (!userId) {
      console.error('Unusual: Cannot fetch content without a valid user_id');
      return Promise.resolve({ success: false });
    }
    
    // There are two ways to call Supabase for content:
    // 1. Using the Edge Function (preferred, but may need deployment)
    // 2. Using the SQL stored procedure (backup method)
    
    // Let's try the edge function first
    fetch(`${apiUrl}/functions/v1/get_content`, {
      method: 'POST',
      mode: 'no-cors',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdja3Zqb3ZvenVwdnRlcWl2aml2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4MzEyODcsImV4cCI6MjA1ODQwNzI4N30.jKqHs21xpUtAcooiAOL-e04fkYEGVqEdpdSfB7PLnrs`
      },
      body: JSON.stringify({
        user_id: userId,
        referrer: referrer,
        url: url
      })
    })
    .then(function(response) {
      // When using no-cors, the response is opaque and can't be inspected
      if (response.type === 'opaque') {
        console.log('Unusual: Received opaque response (expected with no-cors)');
        // With opaque responses, we can't determine success or failure
        // Fall back to stored procedure
        return fallbackToStoredProcedure(apiUrl, userId, referrer, url);
      }
      
      if (!response.ok) {
        // If edge function fails, try the SQL stored procedure
        console.error(`Unusual: Edge function failed with status ${response.status}`);
        
        // For diagnostic purposes, try to get the error message
        return response.text().then(text => {
          try {
            const errorData = JSON.parse(text);
            console.error('Unusual: Error details:', errorData);
          } catch (e) {
            console.error('Unusual: Error response:', text);
          }
          
          return fallbackToStoredProcedure(apiUrl, userId, referrer, url);
        });
      }
      return response.json();
    })
    .then(function(data) {
      if (data && data.replacements) {
        applyReplacements(data.replacements);
      }
    })
    .catch(function(error) {
      console.error('Unusual: Error in primary content fetch method', error);
      // If the primary method fails, try the fallback
      fallbackToStoredProcedure(apiUrl, userId, referrer, url);
    });
  };
  
  // Fallback method using SQL stored procedure
  const fallbackToStoredProcedure = function(apiUrl, userId, referrer, url) {
    console.log('Unusual: Trying fallback method...');
    
    return fetch(`${apiUrl}/rest/v1/rpc/get_content`, {
      method: 'POST',
      mode: 'no-cors',
      headers: {
        'Content-Type': 'application/json',
        'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdja3Zqb3ZvenVwdnRlcWl2aml2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4MzEyODcsImV4cCI6MjA1ODQwNzI4N30.jKqHs21xpUtAcooiAOL-e04fkYEGVqEdpdSfB7PLnrs',
        'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdja3Zqb3ZvenVwdnRlcWl2aml2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4MzEyODcsImV4cCI6MjA1ODQwNzI4N30.jKqHs21xpUtAcooiAOL-e04fkYEGVqEdpdSfB7PLnrs',
        'Prefer': 'return=minimal'
      },
      body: JSON.stringify({
        "user_id": userId,
        "referrer": referrer,
        "url": url
      })
    })
    .then(function(response) {
      // When using no-cors, the response is opaque and can't be read
      if (response.type === 'opaque') {
        console.log('Unusual: Received opaque response from fallback method (expected with no-cors)');
        // Since we can't determine if the request succeeded, let's assume it did to avoid complex error handling
        return { replacements: [] };
      }
      
      if (!response.ok) {
        throw new Error('Both fetch methods failed, status: ' + response.status);
      }
      return response.json();
    })
    .then(function(data) {
      if (data && data.replacements) {
        applyReplacements(data.replacements);
      }
      return data;
    })
    .catch(function(error) {
      console.error('Unusual: All content fetch methods failed', error);
      return { replacements: [] }; // Return empty replacements as fallback
    });
  };

  // Main execution logic
  const init = function() {
    // Get the user ID
    const userId = getUserId();
    
    if (!userId) {
      console.error('Unusual: No user ID found. Add user_id parameter to the script URL.');
      return; // Exit early if no userId
    }
    
    // Get referrer and current URL
    const referrer = document.referrer || '';
    let currentUrl = window.location.href;
    
    // Ensure URL is valid
    try {
      new URL(currentUrl); // This will throw if URL is invalid
    } catch (e) {
      console.error('Unusual: Invalid current URL:', currentUrl);
      currentUrl = window.location.origin + window.location.pathname;
      console.log('Unusual: Using fallback URL:', currentUrl);
    }
    
    // Use proxy server to avoid CORS issues
    const apiUrl = 'http://localhost:3000'; // Local proxy server
    
    console.log('Unusual: Using API URL:', apiUrl);
    console.log('Unusual: Fetching content with:', {
      user_id: userId,
      referrer: referrer,
      url: currentUrl
    });
    
    // Fetch and apply content
    fetchAndApplyContent(apiUrl, userId, referrer, currentUrl);
  };

  // Start personalization after DOM content loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})(); 